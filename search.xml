<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于遍历对象属性</title>
      <link href="/2022/05/02/%E5%85%B3%E4%BA%8E%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/05/02/%E5%85%B3%E4%BA%8E%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><ol><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames#notes">Object.getOwnPropertyNames() - JavaScript | MDN (mozilla.org)</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in">for…in - JavaScript | MDN (mozilla.org)</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys() - JavaScript | MDN (mozilla.org)</a></p></li></ol><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li><p><code>Object.getOwnPropertyNames()</code> 返回一个数组，该数组对元素是 <code>obj</code>自身拥有的枚举或不可枚举属性名称字符串</p></li><li><p><strong><code>for...in</code>语句</strong>以任意顺序迭代一个对象的除<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>以外的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>属性，包括继承的可枚举属性</p></li><li><p><code>Object.keys</code> 返回一个所有元素为字符串的数组，其元素来自于从给定的<code>object</code>上面可直接枚举的属性</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th align="center"></th><th align="center">可枚举来自原型链的属性</th><th align="center">可枚举描述符为不可枚举的属性</th></tr></thead><tbody><tr><td align="center">Object.getOwnPropertyNames()</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">for…in</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">Object.keys</td><td align="center">否</td><td align="center">否</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于ESM的底层原理以及与CJS的主要差别</title>
      <link href="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/"/>
      <url>/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要模块化"><a href="#为什么需要模块化" class="headerlink" title="为什么需要模块化"></a>为什么需要模块化</h1><ul><li>更好的组织变量和函数</li><li>实现低耦合，高内聚，更好地维护代码</li></ul><h1 id="ESModule如何工作"><a href="#ESModule如何工作" class="headerlink" title="ESModule如何工作"></a>ESModule如何工作</h1><ul><li><p>主流模块化方案有两种，CommonJS 和 EcmaScript Module，这里介绍ESM的工作原理。</p></li><li><p>主要分为三个阶段：构建、实例化、评估（Evalutaion）</p></li></ul><h2 id="1-构建"><a href="#1-构建" class="headerlink" title="1. 构建"></a>1. 构建</h2><ul><li><p>找到应该去哪里获取模块文件</p></li><li><p>下载模块文件</p></li><li><p>解析文件为模块记录（一种应用于模块的数据结构）</p></li></ul><h3 id="1-1-寻找模块文件"><a href="#1-1-寻找模块文件" class="headerlink" title="1.1 寻找模块文件"></a>1.1 寻找模块文件</h3><ul><li><p>先找到入口 main.js</p></li><li><p>通过 import 语句找到其依赖模块</p></li></ul><h3 id="1-2-使用模块加载器下载模块文件"><a href="#1-2-使用模块加载器下载模块文件" class="headerlink" title="1.2 使用模块加载器下载模块文件"></a>1.2 使用模块加载器下载模块文件</h3><ul><li><p>加载器会构造一个 Module Map（Map 中的模块会被缓存）</p></li><li><p>发送请求获取一个模块文件</p></li><li><p>添加键值，URL 和 fetching</p></li><li><p>继续下一个模块文件</p></li><li><p>当获取到相同的模块文件时，略过</p></li></ul><p><img src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/ModuleMap.png"></p><h3 id="1-3-解析模块"><a href="#1-3-解析模块" class="headerlink" title="1.3 解析模块"></a>1.3 解析模块</h3><ul><li>获取模块文件后，将其解析为模块记录，一种描述模块的数据结构，用于帮助浏览器理解模块信息和它们之间的区别。<ul><li><p>模块解析使用严格模式</p></li><li><p>模块文件解析需要在 script 标记 type=“module”</p></li></ul></li></ul><p><img src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/ModuleRecord.png"></p><ul><li>一旦模块记录被创建，就会被置入 Module Map 的值中，替代 fetching，用作模块索引</li></ul><img title src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/MapRecord.png" alt data-align="inline"><h2 id="2-实例化"><a href="#2-实例化" class="headerlink" title="2. 实例化"></a>2. 实例化</h2><p>实例化即结合代码和状态，而状态存于内存中，所以实例化过程即为写入内存的过程。</p><ol><li><p>JS 引擎创建模块环境记录（用于管理模块记录中导出的变量）</p></li><li><p>为导出的变量连接内存空间（环境记录会持续跟踪联系导出变量和内存空间）</p><ol><li><p>内存空间中暂时还不会被写入数据值，只是占有空间，在第三步评估中才会进行写值</p></li><li><p>实例化采用深度优先的后序遍历，保证过程中从完全不需要依赖的模块开始</p></li></ol></li><li><p>为导入连接内存空间，导入和导出的变量连接到同一个内存空间（与CJS的不同点）</p></li></ol><p><img src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/Memroy.png"></p><h2 id="3-评估（运行代码）"><a href="#3-评估（运行代码）" class="headerlink" title="3. 评估（运行代码）"></a>3. 评估（运行代码）</h2><p>运行顶层代码（函数体外的代码），获取模块变量值，写入内存</p><ul><li><p>所有的模块代码应该只被运行一次，否则可能造成潜在副作用，这也是为什么使用 Module Map 对模块记录进行缓存的原因之一，可以保证它只被运行一次。</p></li><li><p>依然是深度优先的后序遍历</p></li></ul><h1 id="CommonJS与ESModule的区别"><a href="#CommonJS与ESModule的区别" class="headerlink" title="CommonJS与ESModule的区别"></a>CommonJS与ESModule的区别</h1><h2 id="1-同步与异步"><a href="#1-同步与异步" class="headerlink" title="1. 同步与异步"></a>1. 同步与异步</h2><ul><li><p>ESM为异步执行，而CJS是同步执行</p></li><li><p>CJS主要在node服务端使用，所有的模块文件保存在本地，同步执行阻塞情况较少</p></li><li><p>ESM主要在浏览器端使用，模块文件需要下载，很可能遭遇阻塞，因此需要异步</p></li></ul><h2 id="2-引用与值的拷贝"><a href="#2-引用与值的拷贝" class="headerlink" title="2. 引用与值的拷贝"></a>2. 引用与值的拷贝</h2><ul><li>CJS在导出模块变量时，使用值的浅拷贝</li></ul><p><img src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/Copy.png"></p><ul><li>ESM的模块变量，导入与导出，连接同一块内存区域，这一点也体现在循环依赖的处理上</li></ul><h2 id="3-循环依赖处理"><a href="#3-循环依赖处理" class="headerlink" title="3. 循环依赖处理"></a>3. 循环依赖处理</h2><p><img src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/Cycle.png"></p><p>以一个简单的循环依赖为例</p><ul><li><p>从main.js出发，进入counter.js，遭遇循环引入</p></li><li><p>将message设置为undefined</p></li><li><p>向下运行，导出count变量，返回main.js，继续运行，导出message，主线程结束</p></li><li><p>消息队列中的代码运行，打印message，值仍为undefind（而不是Eval complete）</p></li><li><p>原因：CJS导出值的浅拷贝</p></li></ul><p><img src="/2022/05/02/%E5%85%B3%E4%BA%8EESM%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%B8%8ECJS%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB/Undefined.png"></p><p>相反，ESM最终的打印值为Eval complete，因为引用同一块内存区域。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/">ES modules: A cartoon deep-dive - Mozilla Hacks - the Web developer blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP发展历史和特点介绍</title>
      <link href="/2022/04/13/HTTP%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E7%89%B9%E7%82%B9%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/04/13/HTTP%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E7%89%B9%E7%82%B9%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-发展历史和特点介绍"><a href="#HTTP-发展历史和特点介绍" class="headerlink" title="HTTP 发展历史和特点介绍"></a>HTTP 发展历史和特点介绍</h1><p>简单、可扩展、无状态、有会话的网络通讯协议</p><h2 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h2><ul><li>请求为单行命令，仅有 GET</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /mypage.html<br></code></pre></td></tr></table></figure><ul><li><p>响应仅包含文档，无 HTTP 头</p></li><li><p>不能传输其他类型，没有状态码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">HTML</span>&gt;</span><br>这是一个非常简单的HTML页面<br><span class="hljs-tag">&lt;/<span class="hljs-name">HTML</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h2><ul><li><p>+引入状态码</p></li><li><p>+引入 HTTP 头，因此具备传输其他类型数据的能力（Content - Type头）</p></li><li><p>+每一个 HTTP 请求建立一个单独的 TCP 连接</p></li><li><p>请求报文：包括请求行和首部行</p><ul><li>请求行：方法字段、URL 字段和 HTTP 版本字段。<ul><li>方法字段：GET、POST、HEAD、PUT 和 DELETE等（POST 和 GET有什么区别？）</li></ul></li></ul></li></ul><p><img src="/2022/04/13/HTTP%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E7%89%B9%E7%82%B9%E4%BB%8B%E7%BB%8D/2022-04-12-20-30-15-image.png"></p><ul><li>响应报文<ul><li>状态行、首部行和响应实体</li><li>状态行：版本号、状态码、状态信息</li></ul></li></ul><p><img src="/2022/04/13/HTTP%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E7%89%B9%E7%82%B9%E4%BB%8B%E7%BB%8D/2022-04-12-20-34-20-image.png"></p><ul><li>-每个TCP连接只发送一个请求，在请求需要重新建立连接</li></ul><h2 id="HTTP-1-1-1-0发布几个月后"><a href="#HTTP-1-1-1-0发布几个月后" class="headerlink" title="HTTP 1.1 (1.0发布几个月后)"></a>HTTP 1.1 (1.0发布几个月后)</h2><ul><li>+连接复用（持久连接）</li><li>+管线化技术（流水线），下一个请求不必等上一个请求发送完即可发送（被证明无法在当前网络下实现</li><li>+支持响应分块（被后续流的机制代替）</li><li>+额外缓存机制 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">HTTP 缓存 - HTTP | MDN</a></li><li>+内容协商机制（Accept - * 头）</li><li>+host 头，不同域名可配置到同一个IP地址</li><li>-队头堵塞，虽然TCP连接能够复用，但是必须按照次序进行通信，如果前面的回应慢就会造成后面的回应堵塞</li></ul><h2 id="HTTP-2-0-15年后"><a href="#HTTP-2-0-15年后" class="headerlink" title="HTTP 2.0 (15年后)"></a>HTTP 2.0 (15年后)</h2><ul><li><p>+二进制协议（1.1是文本协议）</p></li><li><p>+复用协议</p><ul><li><p>流模式，数据包标记 ID</p></li><li><p>同一连接中，可以发送不同的请求和响应，且无需按序</p></li></ul></li><li><p>+头部压缩</p><ul><li><p>使用 Gzip 压缩头部</p></li><li><p>维护头部信息表，只发送索引号</p></li></ul></li><li><p>+允许服务器推送</p></li><li><p>受限于 TCP 协议，会受到网络拥塞影响，一个报文拥塞，全部报文都发不出去</p></li></ul><h2 id="HTTP-3-0"><a href="#HTTP-3-0" class="headerlink" title="HTTP 3.0"></a>HTTP 3.0</h2><ul><li>基于 UDP 的 QUIC 协议</li><li>暂时处于草案状态</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>克服 HTTP 明文传输的缺陷</p><ul><li><p>TLS/SSL：TLS 协议是 SSL 协议的标准化版本</p></li><li><p>如何握手：大致就是客户端验证服务器给出的证书，同时两方共生成三个随机数用作后续对话的加密密钥。</p><ul><li><p>第一步，客户端向服务器发起请求，请求中包含使用的协议版本号、<strong>生成的一个随机数</strong>、以及客户端支持的加密方法。<code>（协议版本+随机数+支持的加密算法）</code></p></li><li><p>第二步，服务器端接收到请求后，<strong>确认双方使用的加密方法、并给出服务器的证书</strong>、以及一个服务器<strong>生成的随机数</strong>。<code>（确认加密算法+证书+随机数）</code></p></li><li><p>第三步，客户端<strong>确认服务器证书有效后</strong>，生成一个<strong>新的随机数</strong>，并使用数字证书中的公钥，<strong>加密这个随机数</strong>，然后发给服务器。并且还会提供一个前面所有内容的 <strong>hash 的值</strong>，用来供服务器检验。<code>（CA公钥验证证书+随机数+使用证书公钥加密随机数+供检验正确性的hash）</code></p></li><li><p>第四步，服务器使用自己的私钥，来<strong>解密客户端发送过来的随机数</strong>。并提供前面所有内容的 hash 值来供客户端检验。<code>（私钥解密随机数+前面所有内容的hash值以供检验）</code></p></li><li><p>第五步，客户端和服务器端根据约定的加密方法使用前面的<strong>三个随机数，生成对话秘钥</strong>，以后的对话过程都使用这个秘钥来加密信息。<code>（利用三个随机数生成加密密钥，后续会话就用约定的算法和密钥加密）</code></p></li></ul></li><li><p>中间人可以伪造请求吗？</p><ul><li><p>证书由CA的私钥加密，加密内容会相应网站的信息摘要</p></li><li><p>不可以，TLS 要求验证证书，中间人没有CA签发的证书，就算劫持了网站的证书也没有相应的CA私钥，无法实现信息篡改。</p></li></ul></li></ul><p><img src="/2022/04/13/HTTP%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E7%89%B9%E7%82%B9%E4%BB%8B%E7%BB%8D/2022-04-13-21-24-10-image.png"></p><p><img src="/2022/04/13/HTTP%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E7%89%B9%E7%82%B9%E4%BB%8B%E7%BB%8D/2022-04-13-21-44-56-49c7ee9636ea97d3e1688f369c3724e.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="/2022/04/10/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/04/10/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h1><p><a href="https://zh-hans.reactjs.org/docs/react-component.html">https://zh-hans.reactjs.org/docs/react-component.html</a></p><h2 id="1-三个常用"><a href="#1-三个常用" class="headerlink" title="1. 三个常用"></a>1. 三个常用</h2><ul><li><p>ComponentDidMount</p></li><li><p>ComponentDidUpdate</p></li><li><p>ComponentWillUnmout</p></li></ul><img title src="/2022/04/10/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/2022-04-10-22-54-50-image.png" alt data-align="inline" width="692"><h2 id="2-三个不常用的"><a href="#2-三个不常用的" class="headerlink" title="2. 三个不常用的"></a>2. 三个不常用的</h2><ul><li><p>static getDerivedStateFromProps ：唯一目的，使 State 随 props 变化，应用场景（state在任何时候都与props相同）</p></li><li><p>getSnapshotBeforeUpdate：在render之后，更新DOM之前，从DOM中捕获信息，返回值会作为componentDidUpdate的第三个参数</p></li><li><p>shouldComponentUpdate：根据 <code>shouldComponentUpdate()</code> 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。首次渲染或使用 <code>forceUpdate()</code> 时不会调用该方法。</p></li></ul><p><img src="/2022/04/10/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/2022-04-10-23-22-48-image.png"></p><h2 id="3-相关知识点"><a href="#3-相关知识点" class="headerlink" title="3. 相关知识点"></a>3. 相关知识点</h2><ul><li><p>React.PureComponent：与 React.Component的区别是，PureComponent以浅层比较方式实现了shouldComponentUpdate，在组件使用相同 state 和 props 情况下可以提高性能</p></li><li><p>受控组件与非受控组件：受控指组件受到 props 影响和控制，非受控指组件仅含有 state <a href="https://goshacmd.com/controlled-vs-uncontrolled-inputs-react/">Controlled and uncontrolled form inputs in React don’t have to be complicated - Gosha Arinich (goshacmd.com)</a></p></li><li><p>component.forceUpdate(callback)：强制组件刷新。如果 <code>render()</code> 方法依赖于其他数据，则可以调用 <code>forceUpdate()</code> 强制让组件重新渲染。<a href="https://zh-hans.reactjs.org/docs/react-component.html#forceupdate">React.Component – React (reactjs.org)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>水平垂直居中</title>
      <link href="/2022/04/09/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>/2022/04/09/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h1><p>背景设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#container</span> &#123;<br>       <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>       <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;<br>       <span class="hljs-attribute">background-color</span>: chocolate;<br>     &#125;<br><span class="hljs-selector-id">#content</span> &#123;<br>       <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>       <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>       <span class="hljs-attribute">background-color</span>: aquamarine;<br>     &#125;<br></code></pre></td></tr></table></figure><h2 id="1-使用Flex布局"><a href="#1-使用Flex布局" class="headerlink" title="1. 使用Flex布局"></a>1. 使用Flex布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-comment">/*主轴对齐*/</span><br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-comment">/*交叉轴对齐*/</span><br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><ul><li>Flex有哪些属性（容器属性、项目属性）</li></ul><h2 id="2-使用定位Position"><a href="#2-使用定位Position" class="headerlink" title="2. 使用定位Position"></a>2. 使用定位Position</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-id">#content</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h3><ul><li><p>Position的值（重点sticky）</p></li><li><p>translate -50%，是以内容宽高为标准的还是算上padding border为标准</p></li></ul><h2 id="3-使用margin-auto"><a href="#3-使用margin-auto" class="headerlink" title="3. 使用margin: auto"></a>3. 使用margin: auto</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-id">#content</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>必须要设置 top left right bottom 为 0</p><h2 id="4-使用-grid-布局"><a href="#4-使用-grid-布局" class="headerlink" title="4. 使用 grid 布局"></a>4. 使用 grid 布局</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试记录</title>
      <link href="/2022/04/09/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/04/09/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="面试记录"><a href="#面试记录" class="headerlink" title="面试记录"></a>面试记录</h1><h2 id="3-24-字节-头条-广州-一面"><a href="#3-24-字节-头条-广州-一面" class="headerlink" title="3/24 字节 头条 广州 一面"></a>3/24 字节 头条 广州 一面</h2><ul><li>自我介绍、介绍项目</li><li>(项目) 可视化战术布置是如何实现的</li><li>(项目) canvas 动画使用 requestAnimationFrame 和 setInterval 有性能啥的差异吗，为什么不用setInterval</li><li>(项目) 有使用过预编译器吗</li><li>(项目) 性能优化怎么做的</li><li>(css) 样式权重</li><li>(css) position</li><li>(css) 实现垂直水平居中，能写多少写多少</li><li>(css) flex</li><li>(react) hooks 解决了什么</li><li>(react) 有哪些 hooks ，相当于以前类式组件的哪些功能</li><li>(react) useEffect </li><li>(react) useMemo useCallback</li><li>(react) 为什么要用useMemo useCallback</li><li>(react) 列表渲染 key的作用</li><li>(react) 组件间如何传值，传值的方法</li><li>(网络) https为什么安全</li><li>(网络) 中间人可以伪造请求吗</li><li>(网络) 缓存</li><li>(js) 一道this指向的题</li><li>(js) 修改一下，达到效果</li><li>(js) bind、apply、call之间的区别</li><li>(编程) url参数提取</li><li>(编程) 一个数组，奇数暂停一秒打印，偶数暂停两秒打印</li></ul><h2 id="3-25-美团-到店-一面"><a href="#3-25-美团-到店-一面" class="headerlink" title="3/25 美团 到店 一面"></a>3/25 美团 到店 一面</h2><ul><li>自我介绍、介绍项目</li><li>(项目) 怎么做性能优化的</li><li>(react) props / state 区别</li><li>(react) 封装一个组件有哪些要点，如何设计一个组件</li><li>(react) 生命周期</li><li>(react) mvvm模式</li><li>(react) react如何实现mvvm的，也就是数据绑定</li><li>(js) setTimeout和setInterval什么区别</li><li>(js)  原型链</li><li>(js) 作用域链</li><li>(js) 闭包，应用</li><li>(js) 宏任务、微任务</li></ul><h2 id="3-29-字节-头条-广州-二面"><a href="#3-29-字节-头条-广州-二面" class="headerlink" title="3/29 字节 头条 广州 二面"></a>3/29 字节 头条 广州 二面</h2><ul><li>自我介绍、介绍项目</li><li>为什么选择前端，如何学习的</li><li>(提到学过Vue)</li><li>Vue和react什么区别，为什么选择react</li><li>(项目)</li><li>负责什么功能</li><li>有什么难点（讲了性能的问题</li><li>大量图标格式的转换和打包，应该会有性能问题，有考虑过吗</li><li>能不能实现将多个图标合成一个雪碧图，讲一讲如何设计</li><li>性能问题是怎么解决的</li><li>懒加载怎么做的</li><li>一个前端项目，从0-1，应该如何设计</li><li>项目搭建结构如何设计</li><li>(git webpack)</li><li>提交时候和远程冲突了，怎么处理，有大量冲突的时候怎么办</li><li>webpack想要使用一些插件怎么做，loader和plugin什么区别</li><li>(css)</li><li>盒子模型，如何切换</li><li>过渡效果怎么实现</li><li>css3 动画了解过吗</li><li>(提到canvas)</li><li>requestAnimationFrame和setTimeout什么区别</li><li>(网络)</li><li>从输入URL到页面展示，整个过程</li><li>get post什么区别</li><li>TCP握手交换了哪些信息</li><li>浏览器如何渲染</li><li>缓存，协商缓存，强制缓存</li><li>expires和max-age区别</li><li>last-modified 和 e-tag区别</li><li>script 标签 async defer区别</li><li>(编程)</li><li>点击统计，使用事件委托，addEventListener()的使用</li><li>双指针合并排序</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于防抖节流中绑定this的问题</title>
      <link href="/2022/04/09/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/09/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于为什么防抖和节流需要绑定this的问题"><a href="#关于为什么防抖和节流需要绑定this的问题" class="headerlink" title="关于为什么防抖和节流需要绑定this的问题"></a>关于为什么防抖和节流需要绑定this的问题</h1><h2 id="introduce"><a href="#introduce" class="headerlink" title="introduce"></a>introduce</h2><p>在防抖和节流中需要绑定this，形如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 实现一个节流</span><br><span class="hljs-comment">// 节流是啥：一定时间内只能触发一次</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, duration</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> now = <span class="hljs-built_in">Date</span>.now();<br>    <span class="hljs-keyword">if</span> (duration - (now - prev) &lt;= <span class="hljs-number">0</span>) &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>, args);<br>      prev = <span class="hljs-built_in">Date</span>.now();<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 实现一个防抖</span><br><span class="hljs-comment">// 防抖是啥：短时间内多次触发只触发最后一次</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>, args);<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>看起来有点多此一举，<strong>为什么要绑定this呢？</strong> 什么样的使用情况会需要这个this？</p><h2 id="answer"><a href="#answer" class="headerlink" title="answer"></a>answer</h2><p>实际上，防抖也好节流也好，最大的应用情景就是事件处理的回调。</p><p>绑定这个this的最大原因就是为了保留事件触发对象的引用（currentTarget。</p><p>是为了让函数在事件触发中获得正确的调用上下文结果。</p><blockquote><h3 id="处理过程中-this-的值的问题"><a href="#处理过程中-this-的值的问题" class="headerlink" title="处理过程中 this 的值的问题"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#the_value_of_this_within_the_handler" title="Permalink to 处理过程中 this 的值的问题">处理过程中 <code>this</code> 的值的问题</a></h3><p>通常来说this的值是触发事件的元素的引用，这种特性在多个相似的元素使用同一个通用事件监听器时非常让人满意。</p><p>当使用 <code>addEventListener()</code> 为一个元素注册事件的时候，句柄里的 this 值是该元素的引用。其与传递给句柄的 event 参数的 <code>currentTarget 属性的值一样。</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, duration</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> prev = <span class="hljs-number">0</span>;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> now = <span class="hljs-built_in">Date</span>.now();</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (duration - (now - prev) &lt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">            fn.apply(<span class="hljs-built_in">this</span>, args);</span><br><span class="javascript">            prev = <span class="hljs-built_in">Date</span>.now();</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;abc&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); </span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      el.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, throttle(print, <span class="hljs-number">1000</span>));</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>正确的结果如下所示：</p><p><img src="/2022/04/09/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E7%9A%84%E9%97%AE%E9%A2%98/2022-04-09-17-33-53-image.png"></p><h2 id="引发问题"><a href="#引发问题" class="headerlink" title="引发问题"></a>引发问题</h2><h3 id="节流和防抖返回的这个函数，是否可以使用箭头函数呢？"><a href="#节流和防抖返回的这个函数，是否可以使用箭头函数呢？" class="headerlink" title="节流和防抖返回的这个函数，是否可以使用箭头函数呢？"></a>节流和防抖返回的这个函数，是否可以使用箭头函数呢？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, duration</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> now = <span class="hljs-built_in">Date</span>.now();<br>    <span class="hljs-keyword">if</span> (duration - (now - prev) &lt;= <span class="hljs-number">0</span>) &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>, args);<br>      prev = <span class="hljs-built_in">Date</span>.now();<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案是否定的，这里的this会指向window，为什么呢？</p><p>因为这里的this指向取决于谁调用了throttle，而调用throttle的一般就是全局。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面经知识点</title>
      <link href="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="一些面经知识点"><a href="#一些面经知识点" class="headerlink" title="一些面经知识点"></a>一些面经知识点</h1><h2 id="React部分"><a href="#React部分" class="headerlink" title="React部分"></a>React部分</h2><h3 id="1-虚拟DOM"><a href="#1-虚拟DOM" class="headerlink" title="1. 虚拟DOM"></a>1. 虚拟DOM</h3><ul><li><p>把页面DOM抽象成了JS对象，<strong>抽象具体渲染过程，实现组件高度抽象化和跨平台</strong>，使其不仅仅局限于浏览器</p></li><li><p>将多次DOM操作先反应在虚拟DOM上，再一次性更新到具体DOM，<strong>在一程度上提高效率</strong></p></li><li><p>在牺牲部分性能前提下，增加可维护性</p></li><li><p>多一层对虚拟DOM操作，实际上会比原生操作更慢（时间上缺陷</p></li><li><p>需要在内存中维护，占用更多内存（空间上缺陷</p></li></ul><h3 id="2-Diff-算法"><a href="#2-Diff-算法" class="headerlink" title="2. Diff 算法"></a>2. Diff 算法</h3><ul><li>更新流程：<ul><li>调用render() 产生新的树</li><li>与上一次的树进行比较，形成patch</li><li>根据patch更新真实DOM</li></ul></li><li>比较过程（启发式算法，完全比较需要 O(n^3)：<ul><li>原则：只发生最小的变化</li><li>一：只对树的同一层次节点进行比较，忽略跨级</li><li>二：对比根节点类型，不相同，则触发全部重建</li><li>三：相同类型节点，对比 class （style 变化时，仅更新有变化的</li><li>四：遍历子节点并递归（列表头结点插入会影响性能</li></ul></li></ul><h3 id="3-为什么需要key"><a href="#3-为什么需要key" class="headerlink" title="3. 为什么需要key"></a>3. 为什么需要key</h3><ul><li>如上所讲，列表头结点插入会影响性能</li><li>遍历子节点时，有大量相同类型节点会优先比较key，提高效率</li></ul><h3 id="4-React-Hooks-有哪些"><a href="#4-React-Hooks-有哪些" class="headerlink" title="4. React Hooks 有哪些"></a>4. React Hooks 有哪些</h3><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/Hooks.png" alt="Hooks"></p><ul><li>useReducer:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> initialState = &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;increment&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">count</span>: state.count + <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;decrement&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">count</span>: state.count - <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      Count: &#123;state.count&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>useCallback</p><ul><li><p><a href="https://www.jianshu.com/p/014ee0ebe959">useCallback()、useMemo() 解决了什么问题？ - 简书 (jianshu.com)</a></p></li><li><p>```javascript<br>const memoizedCallback = useCallback(<br>  () =&gt; {</p><pre><code class="hljs">doSomething(a, b);</code></pre><p>  },<br>  [a, b],<br>);</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><br>- useCallback(fn, deps) 相当于 useMemo(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> fn, deps)<br><br>- 使用场景：<br><br>```javascript<br>    ()=&gt;&#123;&#125; === <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;&#125; // <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>父组件向子组件传入函数</p></li><li><p>父组件重新渲染时会重新创建函数，导致子组件重新渲染</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ParentComp</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [ count, setCount ] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> increment = <span class="hljs-function">() =&gt;</span> setCount(count + <span class="hljs-number">1</span>)<br>  <br>  <span class="hljs-keyword">const</span> [ name, setName ] = useState(<span class="hljs-string">&#x27;hi~&#x27;</span>)<br>  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">(<span class="hljs-params">newName</span>) =&gt;</span> setName(newName)  <span class="hljs-comment">// 父组件渲染时会创建一个新的函数</span><br>  <br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChildComp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changeName&#125;/</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>useMemo:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ParentComp</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [ count, setCount ] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> increment = <span class="hljs-function">() =&gt;</span> setCount(count + <span class="hljs-number">1</span>)<br><br>  <span class="hljs-keyword">const</span> [ name, setName ] = useState(<span class="hljs-string">&#x27;hi~&#x27;</span>)<br>  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">(<span class="hljs-params">newName</span>) =&gt;</span> setName(newName)  <span class="hljs-comment">// 父组件渲染时会创建一个新的函数</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChildComp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changeName&#125;/</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>第一个参数是个函数，返回的对象指向同一个引用，不会创建新对象；</p></li><li><p>第二个参数是个数组，只有数组中的变量改变时，第一个参数的函数才会返回一个新的对象。</p></li></ul><h3 id="5-React-createElement-与React-cloneElement"><a href="#5-React-createElement-与React-cloneElement" class="headerlink" title="5. React.createElement 与React.cloneElement"></a>5. React.createElement 与React.cloneElement</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">React.cloneElement(element, [props], [...children]);<br><br>React.createElement(type, [props], [...children]);<br></code></pre></td></tr></table></figure><ul><li>区别就是，一个使用已有的element创建，另一个使用类型创建</li></ul><h3 id="6-Router"><a href="#6-Router" class="headerlink" title="6. Router"></a>6. Router</h3><ul><li>两种<ul><li>Hash：监听hashchange事件</li><li>H5 History：监听URL的自定义事件</li><li>匹配到相应的组件后触发渲染</li></ul></li><li>&lt;Router /&gt;  /  &lt;Link&gt; / &lt;Switch&gt;</li><li>useParams()、useLocation()、useHistory()</li></ul><h3 id="7-Hooks-优点"><a href="#7-Hooks-优点" class="headerlink" title="7. Hooks 优点"></a>7. Hooks 优点</h3><ul><li>更好的共享状态</li><li>复杂组件更好理解</li></ul><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ul><li>content padding border margin</li><li>box-sizing: content-box  width, height不包含padding和border</li><li>box-sizing: border-box —包含padding border</li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>id </li><li>类</li><li>标签</li><li>子代</li><li>相邻子代</li><li>兄弟</li><li>相邻兄弟</li><li>属性</li><li>伪类</li><li>伪元素</li><li>通配符</li></ul><h3 id="before-after"><a href="#before-after" class="headerlink" title="::before :after"></a>::before :after</h3><ul><li>双冒号是伪元素，单冒号是伪类</li><li>伪类：一般是元素的特殊状态</li><li>伪元素：一般是某个元素的特殊位置，不存在与文档中，看起来像一个元素，所以是伪元素</li></ul><h3 id="可以继承的属性"><a href="#可以继承的属性" class="headerlink" title="可以继承的属性"></a>可以继承的属性</h3><ul><li>字体系列</li><li>文字系列</li><li>列表属性</li><li>表格布局</li><li>光标</li><li>可见性</li></ul><h3 id="优先级计算"><a href="#优先级计算" class="headerlink" title="优先级计算"></a>优先级计算</h3><ul><li>由高到低，四级，0,0,0,0</li><li>标签内最高</li><li>ID次高</li><li>class/属性/伪类第三</li><li>元素和伪元素第四</li><li>通配符 0,0,0,0</li><li>!important 无视，直接最高</li></ul><h3 id="伪类LVHA"><a href="#伪类LVHA" class="headerlink" title="伪类LVHA"></a>伪类LVHA</h3><ul><li>鼠标的各种状态</li></ul><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><ul><li>text-align 行内 inline-block</li><li>margin: 0 auto block</li><li>定位：50% + 负margin值/ translate</li><li>flex  align-items: center; justify-content: center</li></ul><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul><li>none</li><li>inline</li><li>inline-block</li><li>block</li><li>list-item</li><li>table</li><li>inherit</li></ul><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul><li>static</li><li>relative</li><li>absolute</li><li>fixed</li><li>inherit</li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul><li>两根轴</li><li>align-item: 交叉轴如何对齐</li><li>justify-content: 项目在主轴上的对齐方式</li></ul><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><ul><li>减少请求</li><li>造成体积增大</li><li>无法直接缓存</li><li>兼容性问题</li></ul><h3 id="上下margin合并"><a href="#上下margin合并" class="headerlink" title="上下margin合并"></a>上下margin合并</h3><ul><li>条件：常规文档流，同一个BFC，没有padding和border</li><li>兄弟合并：设置其中一个为BFC</li><li>父子合并：设置border或者padding，添加内联元素，父元素形成BFC</li></ul><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><ul><li>块级格式化上下文</li><li>独立布局环境，不影响其他</li><li>创建：根元素，浮动，绝对定位，display: inline-block, flex, table-cell, overflow: 不为visible</li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ul><li>浮动元素，不属于普通文档流，造成父盒子高度塌陷</li><li>伪元素，clear:both</li></ul><h3 id="如何检测transition结束"><a href="#如何检测transition结束" class="headerlink" title="如何检测transition结束"></a>如何检测transition结束</h3><p>检测transitionend事件</p><h3 id="如何防止图片加载抖动"><a href="#如何防止图片加载抖动" class="headerlink" title="如何防止图片加载抖动"></a>如何防止图片加载抖动</h3><p>给图片预留位置</p><p>overflow: hidden; width: 100%; height: 0; padding-bottom: 图片宽高比 %</p><h2 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h2><h3 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1. 作用域"></a>1. 作用域</h3><ul><li>动态作用域：JS 中this 指向问题类似动态作用域</li><li>词法作用域：JS 采用词法作用域，由变量写在哪里（被声明位置）确定其作用域（编译器分词阶段确定</li></ul><h3 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h3><ul><li><p>函数能够记住和访问当前词法作用域，当函数当前作用域之外执行，就形成了闭包</p></li><li><p>如果把访问当前词法作用域的函数当参数传递（回调函数）就是应用了闭包</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wait</span>(<span class="hljs-params">message</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(message);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-this-指向问题"><a href="#3-this-指向问题" class="headerlink" title="3. this 指向问题"></a>3. this 指向问题</h3><ul><li><p>类似动态作用域</p></li><li><p>new 绑定</p></li><li><p>显示绑定 (bind/apply/call)</p></li><li><p>隐式绑定(是否由上下文对象调用)</p></li><li><p>默认绑定(严格模式为undefined，其它情况为全局对象)</p></li><li><p>箭头函数，回归词法作用域</p></li></ul><h3 id="4-硬绑定与软绑定"><a href="#4-硬绑定与软绑定" class="headerlink" title="4. 硬绑定与软绑定"></a>4. 硬绑定与软绑定</h3><ul><li>硬绑定(bind/apply)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 实现一个bind</span><br><span class="hljs-built_in">Function</span>.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">othis, ...rest</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;not callable&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">const</span> ftoBind = <span class="hljs-built_in">this</span>,<br>    fNOP = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;,<br>    fBound = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>        <span class="hljs-comment">// 判断new 调用</span><br>      <span class="hljs-keyword">return</span> ftoBind.apply(<span class="hljs-built_in">this</span>.constructor === ftoBind ? <span class="hljs-built_in">this</span> : othis, rest.concat(args));<br>    &#125;;<br>   <span class="hljs-comment">// 连接原型</span><br>  <span class="hljs-comment">// fNOP.prototype = this.prototype;</span><br>  <span class="hljs-comment">// fBound.prototype = new fNOP();</span><br>    fbound.prototype = <span class="hljs-built_in">Object</span>.create(<span class="hljs-built_in">this</span>.prototype)<br>  <span class="hljs-keyword">return</span> fBound;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>软绑定（硬绑定无法修改this ,软绑定可以修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Function</span>.prototype.softbind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, ...rest</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> bound = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-comment">// 保留隐式绑定和显示绑定的能力</span><br>    <span class="hljs-keyword">return</span> fn.apply(!<span class="hljs-built_in">this</span> || <span class="hljs-built_in">this</span> === (<span class="hljs-built_in">window</span> || <span class="hljs-built_in">global</span>) ? obj : <span class="hljs-built_in">this</span>, rest.concat(args));<br>  &#125;;<br>    <span class="hljs-comment">// 构造原型链</span><br>  bound.prototype = <span class="hljs-built_in">Object</span>.create(fn.prototype);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-39-1-39-39-2-39-39-3-39-map-parseInt-what-amp-why"><a href="#5-39-1-39-39-2-39-39-3-39-map-parseInt-what-amp-why" class="headerlink" title="5. [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) what &amp; why ?"></a>5. <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)</code> what &amp; why ?</h3><ul><li><strong>parseInt(*string*, *radix*)</strong>  解析一个字符串并返回指定基数的十进制整数， <code>radix</code> 是2-36之间的整数，表示被解析字符串的基数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> new_array = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">currentValue[, index[, array]]</span>) </span>&#123;<br> <span class="hljs-comment">// Return element for new_array </span><br>&#125;[, thisArg])<br></code></pre></td></tr></table></figure><ul><li>parseInt(‘1’, 0) //radix为0时，且string参数不以“0x”和“0”开头时，按照10为基数处理。这个时候返回1</li><li>parseInt(‘2’, 1) //基数为1（1进制）表示的数中，最大值小于2，所以无法解析，返回NaN</li><li>parseInt(‘3’, 2) //基数为2（2进制）表示的数中，最大值小于3，所以无法解析，返回NaN</li></ul><h3 id="6-深拷贝"><a href="#6-深拷贝" class="headerlink" title="6. 深拷贝"></a>6. 深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj, depth = <span class="hljs-literal">Infinity</span>, objStack = []</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKeyVals</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取包括Symbol在内的所有属性</span><br>    <span class="hljs-keyword">return</span> [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)].map(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> [<br>      key,<br>      obj[key]<br>    ]);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (depth &lt;= <span class="hljs-number">0</span> || objStack.includes(obj)) &#123;<br>    <span class="hljs-comment">// 处理循环引用</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>) &#123;<br>    <span class="hljs-comment">// 处理时间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(obj);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(obj)) &#123;<br>    <span class="hljs-comment">// 处理数组</span><br>    <span class="hljs-keyword">return</span> obj.map(<span class="hljs-function">(<span class="hljs-params">o</span>) =&gt;</span><br>      <span class="hljs-keyword">typeof</span> o === <span class="hljs-string">&#x27;object&#x27;</span> ? deepClone(o, depth - <span class="hljs-number">1</span>, objStack.concat([obj])) : o<br>    );<br>  &#125;<br>  <span class="hljs-comment">// 快速浅克隆</span><br>  <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj);<br>  getKeyVals(ret).forEach(<span class="hljs-function">(<span class="hljs-params">[key, val]</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理需要深克隆的情况</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> key === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>      ret[key] = deepClone(val, depth - <span class="hljs-number">1</span>, objStack.concat([obj]));<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-数据类型"><a href="#7-数据类型" class="headerlink" title="7. 数据类型"></a>7. 数据类型</h3><ul><li>基本类型：Number / Boolean / String / Null / Undefined / BigInt / Symbol，存放在栈中</li><li>复杂类型：Object 存放在堆中</li></ul><h3 id="8-异步"><a href="#8-异步" class="headerlink" title="8. 异步"></a>8. 异步</h3><ul><li>概念：事件循环、宏任务、微任务 / Promise 、生成器、setTimeout</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">在 JavaScript 中通过 queueMicrotask() 使用微任务 - Web API 接口参考 | MDN (mozilla.org)</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>); <span class="hljs-comment">// 2</span><br>  <span class="hljs-keyword">await</span> async2();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>);<span class="hljs-comment">// 6</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>); <span class="hljs-comment">// 3</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;settimeout&#x27;</span>); <span class="hljs-comment">// 8</span><br>&#125;);<br>async1(); <br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>); <span class="hljs-comment">// 4</span><br>  resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>); <span class="hljs-comment">// 7</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%BC%82%E6%AD%A51.png" alt="顺序"></p><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BB%BB%E5%8A%A1.png" alt="任务"></p><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%BE%AE%E4%BB%BB%E5%8A%A1.png" alt="微任务"></p><h3 id="9-数组扁平化"><a href="#9-数组扁平化" class="headerlink" title="9. 数组扁平化"></a>9. 数组扁平化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> lst = [];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>    arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>        <span class="hljs-keyword">const</span> tmp = flat(item);<br>        lst.push(...tmp);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        lst.push(item);<br>      &#125;<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">return</span> lst;<br>&#125;<br><br><span class="hljs-comment">// 自带方法</span><br><span class="hljs-built_in">Array</span>.prototype.flat()<br><span class="hljs-built_in">Array</span>.prototype.flatMap()<br></code></pre></td></tr></table></figure><h3 id="10-JWT-JSON-Web-Token"><a href="#10-JWT-JSON-Web-Token" class="headerlink" title="10. JWT JSON Web Token"></a>10. JWT JSON Web Token</h3><ul><li><p>三个部分组成：1. header 2. payload 3. signature</p></li><li><p>如何编码：Base64(header) . Base64(payload) . 加密算法(base64(header)+‘.’+base64(payload), secret)</p></li><li><p>如何验证：在服务的对token中的header 和 payload重新加密，比对签名</p></li><li><p>如何防止篡改：secret只保存在服务端，如果发生篡改，对header payload加密后，比对会失败</p></li><li><p>payload中的内容：签发者、面向的用户、过期时间、签发时间、jwt id等还可以加一些业务逻辑相关内容。</p></li></ul><h3 id="11-跨域"><a href="#11-跨域" class="headerlink" title="11. 跨域"></a>11. 跨域</h3><ul><li>同源策略：协议、域名、端口号一致，不同源的js脚本不能操作数据</li></ul><h3 id="12-decodeURI-decodeURIComponent"><a href="#12-decodeURI-decodeURIComponent" class="headerlink" title="12. decodeURI() decodeURIComponent()"></a>12. decodeURI() decodeURIComponent()</h3><p>encodeURI()主要用于整个URI(例如，<a href="https://link.zhihu.com/?target=http://www.baidu.com/search">http://www.baidu.com/search</a>  value.html)，而encode-URIComponent()主要用于对URI中的某一段(例如前面URI中的search value.html)进行编码。它们的主要区别在于，<strong>encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号:、正斜杠/、问号?和井号#<strong>；</strong>而encodeURIComponent()则会对它发现的任何非标准字符进行编码</strong>。</p><h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="1-meta"><a href="#1-meta" class="headerlink" title="1. meta"></a>1. meta</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 声明文档使用的字符编码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 页面描述 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;不超过150个字符&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 页面关键词 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 网页作者 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;name, email@gmail.com&quot;</span>/&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 为移动设备添加 viewport --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span><br><br><br><br><span class="hljs-comment">&lt;!-- iOS 设备 begin --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;标题&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-itunes-app&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telphone=no, email=no&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 不让百度转码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-siteapp&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;HandheldFriendly&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MobileOptimized&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;320&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- uc强制竖屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;screen-orientation&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-orientation&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- UC强制全屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;full-screen&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- QQ强制全屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-fullscreen&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- UC应用模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;browsermode&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;application&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- QQ应用模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-page-mode&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msapplication-tap-highlight&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span><br><br><br><br><span class="hljs-comment">&lt;!-- iOS 图标 begin --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/apple-touch-icon-57x57-precomposed.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;114x114&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/apple-touch-icon-114x114-precomposed.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;144x144&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/apple-touch-icon-144x144-precomposed.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class="hljs-comment">&lt;!-- iOS 图标 end --&gt;</span><br><br><br><br><span class="hljs-comment">&lt;!-- iOS 启动画面 begin --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;768x1004&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/splash-screen-768x1004.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;1536x2008&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/splash-screen-1536x2008.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;1024x748&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/Default-Portrait-1024x748.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;2048x1496&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/splash-screen-2048x1496.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/splash-screen-320x480.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;640x960&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/splash-screen-640x960.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-startup-image&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;640x1136&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/splash-screen-640x1136.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><br><span class="hljs-comment">&lt;!-- iOS 启动画面 end --&gt;</span><br><br><span class="hljs-comment">&lt;!-- iOS 设备 end --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msapplication-TileColor&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#000&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msapplication-TileImage&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;icon.png&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/rss+xml&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;RSS&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/rss.xml&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 添加 RSS 订阅 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/ico&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/favicon.ico&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 添加 favicon icon --&gt;</span><br><br><span class="hljs-comment">&lt;!-- sns 社交标签 begin --&gt;</span><br><span class="hljs-comment">&lt;!-- 参考微博API --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;类型&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:url&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;URL地址&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;标题&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:image&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;图片&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;描述&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- sns 社交标签 end --&gt;</span><br><span class="hljs-comment">&lt;!-- 搜索引擎抓取 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;index,follow&quot;</span>/&gt;</span><br><br>具体参数如下：<br><br>信息参数为all：文件将被检索，且页面上的链接可以被查询；<br><br>信息参数为none：文件将不被检索，且页面上的链接不可以被查询；<br><br>信息参数为index：文件将被检索；<br><br>信息参数为follow：页面上的链接可以被查询；<br><br>信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；<br><br>信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；<br></code></pre></td></tr></table></figure><h3 id="2-很全很全的前端本地存储讲解-SegmentFault-思否"><a href="#2-很全很全的前端本地存储讲解-SegmentFault-思否" class="headerlink" title="2. 很全很全的前端本地存储讲解 - SegmentFault 思否"></a>2. <a href="https://segmentfault.com/a/1190000012578794#articleHeader0">很全很全的前端本地存储讲解 - SegmentFault 思否</a></h3><h3 id="3-WebSocket协议：5分钟从入门到精通-程序猿小卡-博客园-cnblogs-com"><a href="#3-WebSocket协议：5分钟从入门到精通-程序猿小卡-博客园-cnblogs-com" class="headerlink" title="3. WebSocket协议：5分钟从入门到精通 - 程序猿小卡 - 博客园 (cnblogs.com)"></a>3. <a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html">WebSocket协议：5分钟从入门到精通 - 程序猿小卡 - 博客园 (cnblogs.com)</a></h3><h2 id="浏览器部分"><a href="#浏览器部分" class="headerlink" title="浏览器部分"></a>浏览器部分</h2><h3 id="1-性能优化："><a href="#1-性能优化：" class="headerlink" title="1. 性能优化："></a>1. 性能优化：</h3><ul><li>减少HTTP请求次数：文件合并、雪碧图、base64、img不要有空src等、使用GET</li><li>缓存：DNS缓存、HTML缓存</li><li>服务端：CDN、Gzip压缩、减小cookie</li></ul><h3 id="2-浏览器缓存"><a href="#2-浏览器缓存" class="headerlink" title="2. 浏览器缓存"></a>2. 浏览器缓存</h3><p>缓存分为私有缓存和共享缓存，浏览器缓存一般为私有缓存。</p><p>缓存关键主要是 Method 和 URI。</p><p>常见：(1) GET + 200 (2) 永久重定向 301 (3) 404 (4) 206 不完全响应 (5) 被定义为cache键名的响应</p><p>强缓存还是协商缓存由响应头的设置决定。</p><ul><li>强缓存：请求时，先获取缓存的响应头，根据cache-control 信息，判断是否命中缓存，命中则为强缓存(max-age)</li><li>协商缓存：未命中或者 no-cache就是协商缓存，顾名思义需要与服务器协商是否使用缓存。</li><li>Last-modified : 协商缓存中使用，帮助服务器了解缓存是否够新，后续请求发送时，会在请求头中添加 if-modified-since 字段判断资源是否变化，未变化则返回304 NOT MODIFIED，变化则返回请求中更新last -modified字段，变化则返回 200</li><li>E-TAG：与 last - modified类似，后续请求也会发送 if - none -match，判断文件是否变更</li><li>为什么要有Max-age：Expires返回到期的时间是服务器时间，如果服务器和客户端时间差别很大就会产生问题。</li><li><strong>为什么有了 last-modified还要e-tag</strong>，因为<ul><li>某些文件可能会周期性更改，但并不修改文件内容</li><li>某些文件会频繁修改，粒度小于秒这个last-modified的最小单位</li><li>某些服务器不能精确得到最后修改时间</li></ul></li><li>no - cache : 不使用强缓存</li><li>no - store：不使用缓存</li></ul><h2 id="信息安全部分"><a href="#信息安全部分" class="headerlink" title="信息安全部分"></a>信息安全部分</h2><h3 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1. MD5"></a>1. MD5</h3><ul><li><p>MD5解密：对特别大的数据表，密文和密码明文对应，对比查表</p></li><li><p>如何加盐：每个用户随机生成一个盐值，每个盐值都不同。</p></li></ul><hr><h2 id="网络部分"><a href="#网络部分" class="headerlink" title="网络部分"></a>网络部分</h2><h3 id="1-三次握手-四次握手"><a href="#1-三次握手-四次握手" class="headerlink" title="1. 三次握手 / 四次握手"></a>1. 三次握手 / 四次握手</h3><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/2022-04-04-20-32-23-image.png"></p><ul><li><p>三次握手</p><ul><li><p>主动开启方发送SYN报文段, 包含SYN字段和初始序列号(往往是随机的)</p></li><li><p>被动方收到后, 发送自己的SYN报文段, 包含SYN字段, 自己的初始序列号和对主动方的ACK信号 = 主动方 Seq + 1</p></li><li><p>主动方收到被动方SYN报文段后, 发送对被动方SYN报文段的ACK报文, 包含 +1 的己方序列号和作为ACK的对方序列号</p></li></ul></li><li><p>ACK (Acknowledgement) = 期望对方发送的序列号</p></li><li><p>四次握手</p><ul><li><p>主动关闭方发送FIN报文段, 包含对最后一次接收报文的ACK信号和己方的序列号以及FIN信号</p></li><li><p>被动关闭方接收到主动方FIN报文段后, 发送一个对该报文的ACK报文, 包含己方序列号和对对方的ACK序列号</p></li><li><p>完成主动方的连接关闭, 形成半关闭状态, 此时被动方仍然可以发送数据到主动关闭方</p></li><li><p>被动关闭方发送自己的FIN报文段, 包含己方序列号和对对方的ACK序列号, 除FIN信号外与对主动方FIN报文确认的ACK报文段相同</p></li><li><p>主动方收到被动方FIN报文段后, 最后发送一个确认报文段, 等待2MSL(2倍最大存活时间)</p></li></ul></li><li><p>建立连接握手时还会携带哪些信息? </p><ul><li><p>最大报文段</p></li><li><p>选择确认选项</p></li><li><p>窗口缩放选项</p></li><li><p>时间戳和防绕回序列号(重传计时用)</p></li><li><p>用户超时选项</p></li><li><p>认证选项</p></li></ul></li></ul><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/2022-04-04-21-39-21-image.png"></p><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/2022-04-04-21-33-37-image.png"></p><p><img src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/2022-04-04-21-32-45-image.png"></p><img title src="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/2022-04-04-21-28-08-image.png" alt data-align="inline"><h3 id="2-Get-Post-区别"><a href="#2-Get-Post-区别" class="headerlink" title="2. Get Post 区别"></a>2. Get Post 区别</h3><ol><li><p>一般来说，GET用于获取资源，POST用于提交资源</p></li><li><p>传参方式不同，GET采用URL，POST采用 request BODY</p></li><li><p>URL长度限制，GET有限制，POST一般不受限(该限制为服务器制定)</p></li><li><p>参数类型不同，GET只能有使用 ASCII ，POST 无类型限制</p></li><li><p>缓存机制，GET会被缓存，POST不会，除非手动</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React 学习</title>
      <link href="/2021/11/28/React%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/28/React%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="React-编程思想"><a href="#React-编程思想" class="headerlink" title="React 编程思想"></a>React 编程思想</h2><h3 id="UI-分解为组件"><a href="#UI-分解为组件" class="headerlink" title="UI  分解为组件"></a>UI  分解为组件</h3><ul><li>考虑三个方面：编程（单一责任原则[<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single-responsibility principle - Wikipedia</a>]）、CSS、设计</li><li>应当保持 UI 和数据模型（JSON）拥有相同的信息结构，数据能够很自然的映射到组件上，组件能与数据的一部分相匹配。</li><li>化为层级结构</li><li><img src="/../images/ReactStudy/image-20211128200839015.png" alt="image-20211128200839015"></li></ul><h3 id="构建静态版本"><a href="#构建静态版本" class="headerlink" title="构建静态版本"></a>构建静态版本</h3><ul><li>自下而上：适用较大的项目</li><li>自上而下：适用较小的项目</li></ul><h3 id="选择最小且最完整的state"><a href="#选择最小且最完整的state" class="headerlink" title="选择最小且最完整的state"></a>选择最小且最完整的state</h3><ul><li>DRY原则[<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">Don’t repeat yourself - Wikipedia</a>]：修改任何元素时，都不需要修改其它逻辑上不相关的元素</li><li>考虑三个方面：<ul><li>是否会发生变化</li><li>是否来自于父组件</li><li>是否能通过已有的 state 和 prop 计算得到</li></ul></li></ul><h3 id="确定-state-所属的组件"><a href="#确定-state-所属的组件" class="headerlink" title="确定 state 所属的组件"></a>确定 state 所属的组件</h3><ul><li>针对每一个 state 应当：<ol><li>找到基于它渲染的每一个组件</li><li>找到这些组件最近的公共父组件</li><li>决定它应该放在哪，三种可能的方式：<ol><li>直接放在公共父组件 - 常用</li><li>公共父组件之上的某些组件</li><li>若找不到合适的，则专门新建一个组件持有这个state，并将这个组件置于公共父组件之上</li></ol></li></ol></li></ul><h3 id="添加反向数据流"><a href="#添加反向数据流" class="headerlink" title="添加反向数据流"></a>添加反向数据流</h3><ul><li>react 渲染时，数据流单向，逐层向下</li><li>为根据用户输入改变组件，需要增加方向的数据流</li><li>向下传递能够改变 state 的函数</li></ul><h2 id="绘制界面"><a href="#绘制界面" class="headerlink" title="绘制界面"></a>绘制界面</h2><h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> Gallery <span class="token keyword">from</span> <span class="token string">'./Gallery.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Gallery</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul><li>在 js 里写 HTML </li><li>JSX 与 React 是分离的，均可以单独使用</li><li>使用原则：<ul><li>仅返回一个根元素<ul><li>原因：一个组件是一个函数，函数返回值只能是一个对象，除非包装成一个数组，否则不能返回两个对象</li><li>空标签[<a href="https://react.docschina.org/docs/fragments.html">Fragments – React (docschina.org)</a>]：可以不渲染多余的 div</li></ul></li><li>所有元素闭合，如 &lt;img&gt; 必须写成 &lt;img /&gt; </li><li>驼峰命名法，所有，包括属性，比如 SVG 中 stroke-width属性需写成 strokeWidth<ul><li>原因：JSX 本质上仍是JS，变量命名需要遵循JS的原则，比如 class作为保留字不能使用</li><li>例外，由于历史原因aria-*，data-* 等属性仍使用破折号</li><li>HTML / SVG  to JSX 转换器：<a href="https://transform.tools/html-to-jsx">HTML to JSX (transform.tools)</a></li></ul></li></ul></li></ul><h3 id="传递-Props"><a href="#传递-Props" class="headerlink" title="传递 Props"></a>传递 Props</h3><ul><li><p>解构赋值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> person<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// person and size are available here</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>展开语法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Avatar</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传递组件 {children} </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> Avatar <span class="token keyword">from</span> <span class="token string">'./Avatar.js'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Card</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Avatar</span></span>        <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">person</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>           name<span class="token operator">:</span> <span class="token string">'Katsuko Saruhashi'</span><span class="token punctuation">,</span>          imageId<span class="token operator">:</span> <span class="token string">'YfeOqp2'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Card</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><ul><li> if</li></ul>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text"> ✔</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>三目运算符</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>isPacked <span class="token operator">?</span> name <span class="token operator">+</span> <span class="token string">' ✔'</span> <span class="token operator">:</span> name<span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AND</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>isPacked <span class="token operator">&amp;&amp;</span> <span class="token string">'✔'</span><span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS : AND 左边不能直接使用数值。原因：当值为 0 时，比如 ，{ count &amp;&amp; &lt;Elem /&gt; } 当count = 0 时，表达式并不会产生断路效果，什么都不渲染，而是渲染 0 本身</p></li><li><p>赋值给变量</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  itemContent <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">" ✔"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>itemContent<span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="渲染列表"><a href="#渲染列表" class="headerlink" title="渲染列表"></a>渲染列表</h3><ul><li>数组的 map 方法和 filter 方法</li><li>区别于单纯的空标签 &lt;Fragment key = { id }&gt; 可以添加 key , 同时它又不会被渲染出来</li><li>key 的选择：唯一且不变</li><li>为什么需要 key ：类型与文件系统中的文件名，用于识别文件，如果没有，当项的顺序因为删除插入发生变化时不能进行有效的识别。这也是为什么最好不要使用数组的索引作为key的原因</li><li>组件不会接受名为 “key” 的 prop </li></ul><h3 id="组件应当是一个纯函数"><a href="#组件应当是一个纯函数" class="headerlink" title="组件应当是一个纯函数"></a>组件应当是一个纯函数</h3><ul><li>纯函数：不改变任何外部的对象和变量、同样的输入产生同样的输出<ul><li>组件渲染时不应当改变先前就已经存在的变量和对象</li><li>组件渲染应当不依赖其他组件，每个组件应只计算自身的JSX</li><li>在React严格模式下可以发现这些不纯的组件</li></ul></li><li>函数式编程需要纯粹性<ul><li>但是，必要时必须发生变化，比如重绘页面、更改数据</li><li>因此这些改变称为副作用（Effect Side），改变发生在其余时间而不是渲染时</li><li>副作用通常属于事件处理程序，所以事件处理函数可以不是纯函数</li></ul></li></ul><h2 id="添加交互"><a href="#添加交互" class="headerlink" title="添加交互"></a>添加交互</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>事件冒泡、事件捕获，例外：onScroll 只作用于当前的元素</li><li>stopPropagation()</li><li>on${event}Capture：捕获，Capture添加在具体事件之后，类似vue中事件修饰词</li><li>preventDefault()</li></ul><h3 id="state：组件记忆"><a href="#state：组件记忆" class="headerlink" title="state：组件记忆"></a>state：组件记忆</h3><ul><li>useState</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>things<span class="token punctuation">,</span> setThings<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>为什么叫“hook”：They let you “hook into” different React features.</p></li><li><p>hook只能放在组件的最顶层</p></li><li><p>初始化时渲染 - 更新state - 二次渲染</p></li><li><p>useState是在没有传入任何识别符的情况下，是如何知道应当返回哪个state的？</p><ul><li>使用数组，基于每次渲染时的稳定调用顺序。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> componentHooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> currentHookIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// How useState works inside React (simplified).</span><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> pair <span class="token operator">=</span> componentHooks<span class="token punctuation">[</span>currentHookIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This is not the first render,</span>    <span class="token comment">// so the state pair already exists.</span>    <span class="token comment">// Return it and prepare for next Hook call.</span>    currentHookIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pair<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// This is the first time we're rendering,</span>  <span class="token comment">// so create a state pair and store it.</span>  pair <span class="token operator">=</span> <span class="token punctuation">[</span>initialState<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// When the user requests a state change,</span>    <span class="token comment">// put the new value into the pair.</span>    pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nextState<span class="token punctuation">;</span>    <span class="token function">updateDOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Store the pair for future renders</span>  <span class="token comment">// and prepare for the next Hook call.</span>  componentHooks<span class="token punctuation">[</span>currentHookIndex<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span>  currentHookIndex<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pair<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>state是独立的，即使同一组件被渲染两次</li></ul><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><ul><li>三步：<ul><li>触发：初始化、state更新</li><li>渲染：递归渲染</li><li>提交改变：初始化时使用appendChild、重新渲染则只应用最小的必要改变</li></ul></li><li>最后，浏览器重绘</li></ul><h3 id="state和快照"><a href="#state和快照" class="headerlink" title="state和快照"></a>state和快照</h3><ul><li>渲染意味着React在调用组件（函数），返回的UI是基于当前的state、props、事件处理函数和局部变量计算形成的快照</li><li>state存在于组件之外，不像一般局部变量，当函数调用结束时即被回收。</li><li>对state的修改只会在下一次渲染时生效，多次调用setState只会作用一次，且React处理状态更新会在所有事件处理函数之后发生。</li><li>在渲染发生作用之前，state的值会被 “fixed” ，即使调用它的函数是异步的，这是为了防止代码在运行时，state发生改变，从而导致与预期不同的结果</li></ul><h3 id="state的更新，如何使用最新的state"><a href="#state的更新，如何使用最新的state" class="headerlink" title="state的更新，如何使用最新的state"></a>state的更新，如何使用最新的state</h3><ul><li><p>批处理（batching）：state的更新会发生在所有setState完成之后，这样可以防止过多的重新渲染</p></li><li><p>如何使用最新的state：在setState中使用回调函数</p><ul><li>每次调用setState传入一个回调函数，setState会将这个函数放入一个队列，最后更新时会依次调用队列中的回调函数</li><li>混合使用：</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这一步也会被加入队列</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入队列</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increase the number</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">// 结果是6    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increase the number</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"> // 结果是46    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="在State中更新对象"><a href="#在State中更新对象" class="headerlink" title="在State中更新对象"></a>在State中更新对象</h3><ul><li>mutation(突变)：直接更改对象内部的值</li><li>虽然State中的对象是可以改变的，但仍然应当视其为只读，因为，单纯改变对象中的值不会触发重新渲染</li><li>使用扩展语法，快速覆写一个对象的属性<ul><li>扩展语法只复制一层深度，若需要更新嵌套的属性，则需要多次使用</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span>person<span class="token punctuation">,</span> <span class="token comment">// Copy the old fields</span>  firstName<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token comment">// But override this one</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 使用扩展语法更新更深层次的属性</span>  <span class="token operator">...</span>person<span class="token punctuation">,</span>  artwork<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>person<span class="token punctuation">.</span>artwork<span class="token punctuation">,</span>      image<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>更方便的更新属性（如果对象嵌套很深）：使用 Immer库 <a href="https://github.com/immerjs/use-immer">immerjs/use-immer: Use immer to drive state with a React hooks (github.com)</a></p></li><li><p>为什么不推荐使用突变？</p><ul><li>Debugging：可以在debug过程中方便的观察到渲染之间State是如何变化的</li><li>Optimizations：React的通常优化策略是当state和prop不发生改变时直接跳过，不进行突变有助于快速检查哪些发生了变化</li><li>New Features：正在开发中的新功能依赖于“把state视作快照”</li><li>Requirement Changes：便于一些应用实现基于“历史”的功能，比如Undo / Redo</li><li>Simpler Implementation：不进行突变，可以使React不对你的对象做任何特别处理，不需要劫持这些对象的属性（这一条是在吐槽VUE的双向数据绑定是劫持对象属性实现的，是吧？）</li></ul></li></ul><h3 id="在State中更新数组"><a href="#在State中更新数组" class="headerlink" title="在State中更新数组"></a>在State中更新数组</h3><ul><li>每次更新应当重新创建数组</li></ul><p><img src="/../images/ReactStudy/image-20211201110617187.png" alt="image-20211201110617187"></p><ul><li>slice和splice的区别，slice会返回新的数组</li><li>使用filter删除数组项</li><li>注意嵌套情况，也应当创建新的对象，或者使用Immer</li></ul><h2 id="管理状态"><a href="#管理状态" class="headerlink" title="管理状态"></a>管理状态</h2><h3 id="输入相关的状态声明"><a href="#输入相关的状态声明" class="headerlink" title="输入相关的状态声明"></a>输入相关的状态声明</h3><ul><li>找出影响组件展示的状态</li><li>确定触发状态改变的因素（人还是程序<ul><li>画出状态转换图</li></ul></li><li>使用useState声明状态</li><li>移除不必要状态<ul><li>不同状态是否会产生矛盾</li><li>该状态的信息是否能从其他状态获取</li></ul></li></ul><h3 id="选择State的结构"><a href="#选择State的结构" class="headerlink" title="选择State的结构"></a>选择State的结构</h3><ul><li>组合相关的状态</li><li>避免产生状态内部的矛盾</li><li>避免多余的状态，如果他们能从其他状态获取的话</li><li>减少和避免状态的重复，否则很难实现它们的同步</li><li>避免深度嵌套，尽量保持状态结构的平滑</li></ul><h3 id="共享状态"><a href="#共享状态" class="headerlink" title="共享状态"></a>共享状态</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SVG学习笔记</title>
      <link href="/2021/11/11/SVG%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/11/SVG%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h1><h2 id="1-SVG与Canvas"><a href="#1-SVG与Canvas" class="headerlink" title="1. SVG与Canvas"></a>1. SVG与Canvas</h2><ul><li>两种绘图方式</li><li>SVG图像可以绘制在Canvas上</li><li>API 参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">Canvas - Web API 接口参考 | MDN (mozilla.org)</a></li></ul><h2 id="2-Canvas绘制SVG"><a href="#2-Canvas绘制SVG" class="headerlink" title="2. Canvas绘制SVG"></a>2. Canvas绘制SVG</h2><p>核心：drawImage()</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">CanvasRenderingContext2D.drawImage() - Web API 接口参考 | MDN (mozilla.org)</a></p><p>PS：有一个实验中的API Path2D() 可以直接绘制SVG路径</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Path2D/Path2D">Path2D() - Web API 接口参考 | MDN (mozilla.org)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleDraw</span>(<span class="hljs-params">multi</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> svgImg = imgRef.current; <span class="hljs-comment">// 使用svg作为src的image标签</span><br>    <span class="hljs-keyword">const</span> canvas = canvasRef.current;<span class="hljs-comment">// canvas元素</span><br>    <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>); <span class="hljs-comment">// 获取2d图像绘制功能</span><br>    <span class="hljs-keyword">let</span> width = svgImg.clientWidth * multi;<span class="hljs-comment">// multi: 放大倍数</span><br>    <span class="hljs-keyword">let</span> height = svgImg.clientHeight * multi;<br>    canvas.width = width;<span class="hljs-comment">// 设置canvas的大小</span><br>    canvas.height = height;<br>    ctx.drawImage(svgImg, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>  &#125;;<br>&#125;  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Path2D API绘制SVG Paths</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleSVGPaths</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> canvas = canvasRef.current;<br>  <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>  <span class="hljs-keyword">const</span> pureSvg = svgRef.current;<br>  <span class="hljs-keyword">const</span> paths = pureSvg.childNodes;<br>  ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">48</span>, <span class="hljs-number">48</span>);<br>  ctx.scale(<span class="hljs-number">2</span> / <span class="hljs-number">3</span>, <span class="hljs-number">2</span> / <span class="hljs-number">3</span>); <span class="hljs-comment">// 不知道为什么画出来是48*48而不是32*32</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> p <span class="hljs-keyword">of</span> paths) &#123;<br>    <span class="hljs-keyword">const</span> d = p.getAttribute(<span class="hljs-string">&#x27;d&#x27;</span>);<br>    <span class="hljs-keyword">const</span> stroke = p.getAttribute(<span class="hljs-string">&#x27;stroke&#x27;</span>);<br>    <span class="hljs-keyword">const</span> strokeWidth = p.getAttribute(<span class="hljs-string">&#x27;stroke-width&#x27;</span>);<br>    <span class="hljs-keyword">const</span> strokeLinejoin = p.getAttribute(<span class="hljs-string">&#x27;stroke-linejoin&#x27;</span>); <span class="hljs-comment">// 获取各种属性</span><br>    <span class="hljs-keyword">const</span> p2d = <span class="hljs-keyword">new</span> Path2D(d); <span class="hljs-comment">// 创建svg path</span><br>    ctx.strokStyle = stroke; <span class="hljs-comment">// 设置颜色宽度连接方式等</span><br>    ctx.lineWidth = (<span class="hljs-built_in">Number</span>(strokeWidth) * <span class="hljs-number">2</span>) / <span class="hljs-number">3</span>;<br>    ctx.lineJoin = strokeLinejoin;<br>    ctx.stroke(p2d); <span class="hljs-comment">// 绘制</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;svgRef&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;32&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;32&#x27;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&#x27;0 0 48 48&#x27;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&#x27;none&#x27;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&#x27;http://www.w3.org/2000/svg&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&#x27;M5 7L10 9V37L5 39V7Z&#x27;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&#x27;none&#x27;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#x27;#333&#x27;</span> <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-attr">strokeLinejoin</span>=<span class="hljs-string">&#x27;round&#x27;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&#x27;M16 23L21 25V37L16 39V23Z&#x27;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&#x27;none&#x27;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#x27;#333&#x27;</span> <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-attr">strokeLinejoin</span>=<span class="hljs-string">&#x27;round&#x27;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&#x27;M27 21L32 19V35L27 33V21Z&#x27;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&#x27;none&#x27;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#x27;#333&#x27;</span> <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-attr">strokeLinejoin</span>=<span class="hljs-string">&#x27;round&#x27;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&#x27;M38 9L43 11V37L38 39V9Z&#x27;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&#x27;none&#x27;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#x27;#333&#x27;</span> <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-attr">strokeLinejoin</span>=<span class="hljs-string">&#x27;round&#x27;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-SVG导出为PNG"><a href="#3-SVG导出为PNG" class="headerlink" title="3.  SVG导出为PNG"></a>3.  SVG导出为PNG</h2><p>核心：通过DataUrl创建链接进行下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle2PNG</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>  <span class="hljs-keyword">const</span> data = canvas.toDataURL(<span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 类型,图片质量</span><br>  <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 创建下载链接</span><br>  a.href = data;<br>  a.download = <span class="hljs-string">&#x27;svgDemo.png&#x27;</span>;<br>  a.click();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-SVG转换为PNG-Uri"><a href="#4-SVG转换为PNG-Uri" class="headerlink" title="4.  SVG转换为PNG Uri"></a>4.  SVG转换为PNG Uri</h2><p>核心：SVG -&gt; SVG Base64 Uri -&gt; &lt;image/&gt; -&gt; canvas -&gt; toDataURL(‘image/png’)</p><ol><li><p>对SVG进行预处理</p><ol><li>处理内部的&lt;image/&gt;</li><li>处理CSS</li></ol></li><li><p>把SVG转换为base64编码的Uri</p><ol><li>API window.btoa() <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/btoa">WindowOrWorkerGlobalScope.btoa() - Web API 接口参考 | MDN (mozilla.org)</a></li></ol></li><li><p>通过获得的SVG DataUri，新建&lt;image/&gt;</p></li><li><p>image加载成功时，利用回调，转换为PNG Uri：</p><ol><li>创建canvas</li><li>利用drawImage() 把&lt;image /&gt;绘制在canvas上</li><li>利用canvas.toDataURL(‘image/png’,1) 转换为PNG Uri</li></ol></li><li><p> 参考：npm 包 save-svg-as-png <a href="https://github.com/exupero/saveSvgAsPng">exupero/saveSvgAsPng: Save SVGs as PNGs from the browser. (github.com)</a></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存为png，原理是动态创建canvas标签，利用toDataURL()创建下载链接</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;object&#125;</span> </span>src image</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> </span>width image.width</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> </span>height image.height</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertToPng</span>(<span class="hljs-params">src, width, height</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>  <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>  <span class="hljs-keyword">const</span> pixelRatio = <span class="hljs-built_in">window</span>.devicePixelRatio;<br>  canvas.width = width * pixelRatio;<br>  canvas.height = height * pixelRatio;<br>  canvas.style.width = <span class="hljs-string">`<span class="hljs-subst">$&#123;canvas.width&#125;</span>px`</span>;<br>  canvas.style.height = <span class="hljs-string">`<span class="hljs-subst">$&#123;canvas.height&#125;</span>px`</span>;<br>  ctx.setTransform(pixelRatio, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pixelRatio, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  ctx.drawImage(src, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> png = canvas.toDataURL(<span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>  a.href = png;<br>  a.download = <span class="hljs-string">&#x27;saveAsPng&#x27;</span>;<br>  a.click();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存为png简单Demo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveAsPng</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> pureSvg = svgRef.current;<br>  <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> XMLSerializer();<br>  <span class="hljs-keyword">const</span> src = s.serializeToString(pureSvg); <span class="hljs-comment">// 对svg进行序列化，转为字符串</span><br>  <span class="hljs-keyword">const</span> doctype =<br>    <span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot; [&lt;!ENTITY nbsp &quot;&amp;#160;&quot;&gt;]&gt;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> svgUri = <span class="hljs-string">`data:image/svg+xml;base64,<span class="hljs-subst">$&#123;<span class="hljs-built_in">window</span>.btoa(doctype + src)&#125;</span>`</span>; <span class="hljs-comment">// 转为base64编码的dataUri</span><br>  <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> Image();<br>  image.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>    convertToPng(image, image.width, image.height);<br>  &#125;;<br>  image.onerror = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;image load error&#x27;</span>);<br>  &#125;;<br>  image.src = svgUri;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-SVG字符串与SVG元素的互相转换"><a href="#5-SVG字符串与SVG元素的互相转换" class="headerlink" title="5. SVG字符串与SVG元素的互相转换"></a>5. SVG字符串与SVG元素的互相转换</h2><ol><li>SVG字符串 -&gt; SVG元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 把SVG字符串转换为XML</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>str svg字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-variable">XML</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2svg</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DOMParser().parseFromString(str, <span class="hljs-string">&#x27;text/xml&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">const</span> svgNode = str2svg(svg).documentElement;<br>ParentDIV.appendChild(svgNode); <span class="hljs-comment">// 添加svg元素</span><br></code></pre></td></tr></table></figure><ol start="2"><li>SVG元素 -&gt; SVG字符串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   <span class="hljs-keyword">const</span> pureSvg = svgRef.current; <span class="hljs-comment">// 获取svg元素</span><br>   <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> XMLSerializer();<br>   <span class="hljs-keyword">const</span> src = s.serializeToString(pureSvg); <span class="hljs-comment">// 对svg进行序列化，转为字符串</span><br>   <span class="hljs-keyword">const</span> doctype =<br>     <span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot; [&lt;!ENTITY nbsp &quot;&amp;#160;&quot;&gt;]&gt;&#x27;</span>;<br><span class="hljs-keyword">const</span> svgString = doctype + src; <span class="hljs-comment">// 拼接</span><br></code></pre></td></tr></table></figure><h2 id="6-对图标的一些属性的简单修改"><a href="#6-对图标的一些属性的简单修改" class="headerlink" title="6. 对图标的一些属性的简单修改"></a>6. 对图标的一些属性的简单修改</h2><p>核心：使用setAttribute()对svg元素进行简单的设置</p><ol><li>代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 简单修改svg元素的属性</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param <span class="hljs-type">&#123;object&#125;</span> </span>config svg设置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param <span class="hljs-type">&#123;HTMLElement&#125;</span> </span>svgNode svg元素</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setConfig</span>(<span class="hljs-params">config, svgNode</span>) </span>&#123;<br>   <span class="hljs-keyword">const</span> &#123;<br>     size = <span class="hljs-string">&#x27;3em&#x27;</span>,<br>     strokeWidth = <span class="hljs-string">&#x27;4&#x27;</span>,<br>     strokeLinejoin = <span class="hljs-string">&#x27;round&#x27;</span>,<br>     stroke = <span class="hljs-string">&#x27;#333&#x27;</span><br>   &#125; = config || &#123;&#125;;<br>   <span class="hljs-keyword">if</span> (svgNode == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>   svgNode.setAttribute(<span class="hljs-string">&#x27;width&#x27;</span>, size);<br>   svgNode.setAttribute(<span class="hljs-string">&#x27;height&#x27;</span>, size);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> child <span class="hljs-keyword">of</span> svgNode.childNodes) &#123;<br>     child.setAttribute(<span class="hljs-string">&#x27;stroke-width&#x27;</span>, strokeWidth);<br>     child.setAttribute(<span class="hljs-string">&#x27;stroke-linejoin&#x27;</span>, strokeLinejoin);<br>     child.setAttribute(<span class="hljs-string">&#x27;stroke&#x27;</span>, stroke);<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Demo地址：<a href="https://github.com/Ilizarov1/react_blog">Ilizarov1/react_blog (github.com)</a></li></ol><h1 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h1><p>可以对AE转出的json格式动画进行实时渲染</p><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h2><ol><li><p>主要使用了react-lottie库，该库将 lottie-web 进行了一些封装，便于在react中使用</p></li><li><p><a href="https://github.com/chenqingspring/react-lottie">chenqingspring/react-lottie: Render After Effects animations on React based on lottie-web (github.com)</a></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Lottie <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-lottie&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> LineAnimation <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../public/LineAnimation.json&#x27;</span>;<br><br><span class="hljs-keyword">const</span> MyLottie = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">autoPlay</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">animationData</span>: LineAnimation,<br>    <span class="hljs-attr">rendererSettings</span>: &#123;<br>      <span class="hljs-attr">preserveAspectRatio</span>: <span class="hljs-string">&#x27;xMidYMid slice&#x27;</span><br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Lottie</span> <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;options&#125;</span> /&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> SVG </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
