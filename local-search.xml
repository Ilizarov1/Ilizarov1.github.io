<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面经知识点</title>
    <link href="/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/03/06/%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>前端,面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>React 学习</title>
    <link href="/2021/11/28/React%20%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/28/React%20%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="React-编程思想"><a href="#React-编程思想" class="headerlink" title="React 编程思想"></a>React 编程思想</h2><h3 id="UI-分解为组件"><a href="#UI-分解为组件" class="headerlink" title="UI  分解为组件"></a>UI  分解为组件</h3><ul><li>考虑三个方面：编程（单一责任原则[<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single-responsibility principle - Wikipedia</a>]）、CSS、设计</li><li>应当保持 UI 和数据模型（JSON）拥有相同的信息结构，数据能够很自然的映射到组件上，组件能与数据的一部分相匹配。</li><li>化为层级结构</li><li><img src="/../images/ReactStudy/image-20211128200839015.png" alt="image-20211128200839015"></li></ul><h3 id="构建静态版本"><a href="#构建静态版本" class="headerlink" title="构建静态版本"></a>构建静态版本</h3><ul><li>自下而上：适用较大的项目</li><li>自上而下：适用较小的项目</li></ul><h3 id="选择最小且最完整的state"><a href="#选择最小且最完整的state" class="headerlink" title="选择最小且最完整的state"></a>选择最小且最完整的state</h3><ul><li>DRY原则[<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">Don’t repeat yourself - Wikipedia</a>]：修改任何元素时，都不需要修改其它逻辑上不相关的元素</li><li>考虑三个方面：<ul><li>是否会发生变化</li><li>是否来自于父组件</li><li>是否能通过已有的 state 和 prop 计算得到</li></ul></li></ul><h3 id="确定-state-所属的组件"><a href="#确定-state-所属的组件" class="headerlink" title="确定 state 所属的组件"></a>确定 state 所属的组件</h3><ul><li>针对每一个 state 应当：<ol><li>找到基于它渲染的每一个组件</li><li>找到这些组件最近的公共父组件</li><li>决定它应该放在哪，三种可能的方式：<ol><li>直接放在公共父组件 - 常用</li><li>公共父组件之上的某些组件</li><li>若找不到合适的，则专门新建一个组件持有这个state，并将这个组件置于公共父组件之上</li></ol></li></ol></li></ul><h3 id="添加反向数据流"><a href="#添加反向数据流" class="headerlink" title="添加反向数据流"></a>添加反向数据流</h3><ul><li>react 渲染时，数据流单向，逐层向下</li><li>为根据用户输入改变组件，需要增加方向的数据流</li><li>向下传递能够改变 state 的函数</li></ul><h2 id="绘制界面"><a href="#绘制界面" class="headerlink" title="绘制界面"></a>绘制界面</h2><h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> Gallery <span class="token keyword">from</span> <span class="token string">'./Gallery.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Gallery</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul><li>在 js 里写 HTML </li><li>JSX 与 React 是分离的，均可以单独使用</li><li>使用原则：<ul><li>仅返回一个根元素<ul><li>原因：一个组件是一个函数，函数返回值只能是一个对象，除非包装成一个数组，否则不能返回两个对象</li><li>空标签[<a href="https://react.docschina.org/docs/fragments.html">Fragments – React (docschina.org)</a>]：可以不渲染多余的 div</li></ul></li><li>所有元素闭合，如 &lt;img&gt; 必须写成 &lt;img /&gt; </li><li>驼峰命名法，所有，包括属性，比如 SVG 中 stroke-width属性需写成 strokeWidth<ul><li>原因：JSX 本质上仍是JS，变量命名需要遵循JS的原则，比如 class作为保留字不能使用</li><li>例外，由于历史原因aria-*，data-* 等属性仍使用破折号</li><li>HTML / SVG  to JSX 转换器：<a href="https://transform.tools/html-to-jsx">HTML to JSX (transform.tools)</a></li></ul></li></ul></li></ul><h3 id="传递-Props"><a href="#传递-Props" class="headerlink" title="传递 Props"></a>传递 Props</h3><ul><li><p>解构赋值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> person<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// person and size are available here</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>展开语法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Avatar</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传递组件 {children} </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> Avatar <span class="token keyword">from</span> <span class="token string">'./Avatar.js'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Card</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Avatar</span></span>        <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">person</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>           name<span class="token operator">:</span> <span class="token string">'Katsuko Saruhashi'</span><span class="token punctuation">,</span>          imageId<span class="token operator">:</span> <span class="token string">'YfeOqp2'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Card</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><ul><li> if</li></ul>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text"> ✔</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>三目运算符</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>isPacked <span class="token operator">?</span> name <span class="token operator">+</span> <span class="token string">' ✔'</span> <span class="token operator">:</span> name<span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AND</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>isPacked <span class="token operator">&amp;&amp;</span> <span class="token string">'✔'</span><span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS : AND 左边不能直接使用数值。原因：当值为 0 时，比如 ，{ count &amp;&amp; &lt;Elem /&gt; } 当count = 0 时，表达式并不会产生断路效果，什么都不渲染，而是渲染 0 本身</p></li><li><p>赋值给变量</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  itemContent <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">" ✔"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>itemContent<span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="渲染列表"><a href="#渲染列表" class="headerlink" title="渲染列表"></a>渲染列表</h3><ul><li>数组的 map 方法和 filter 方法</li><li>区别于单纯的空标签 &lt;Fragment key = { id }&gt; 可以添加 key , 同时它又不会被渲染出来</li><li>key 的选择：唯一且不变</li><li>为什么需要 key ：类型与文件系统中的文件名，用于识别文件，如果没有，当项的顺序因为删除插入发生变化时不能进行有效的识别。这也是为什么最好不要使用数组的索引作为key的原因</li><li>组件不会接受名为 “key” 的 prop </li></ul><h3 id="组件应当是一个纯函数"><a href="#组件应当是一个纯函数" class="headerlink" title="组件应当是一个纯函数"></a>组件应当是一个纯函数</h3><ul><li>纯函数：不改变任何外部的对象和变量、同样的输入产生同样的输出<ul><li>组件渲染时不应当改变先前就已经存在的变量和对象</li><li>组件渲染应当不依赖其他组件，每个组件应只计算自身的JSX</li><li>在React严格模式下可以发现这些不纯的组件</li></ul></li><li>函数式编程需要纯粹性<ul><li>但是，必要时必须发生变化，比如重绘页面、更改数据</li><li>因此这些改变称为副作用（Effect Side），改变发生在其余时间而不是渲染时</li><li>副作用通常属于事件处理程序，所以事件处理函数可以不是纯函数</li></ul></li></ul><h2 id="添加交互"><a href="#添加交互" class="headerlink" title="添加交互"></a>添加交互</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>事件冒泡、事件捕获，例外：onScroll 只作用于当前的元素</li><li>stopPropagation()</li><li>on${event}Capture：捕获，Capture添加在具体事件之后，类似vue中事件修饰词</li><li>preventDefault()</li></ul><h3 id="state：组件记忆"><a href="#state：组件记忆" class="headerlink" title="state：组件记忆"></a>state：组件记忆</h3><ul><li>useState</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>things<span class="token punctuation">,</span> setThings<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>为什么叫“hook”：They let you “hook into” different React features.</p></li><li><p>hook只能放在组件的最顶层</p></li><li><p>初始化时渲染 - 更新state - 二次渲染</p></li><li><p>useState是在没有传入任何识别符的情况下，是如何知道应当返回哪个state的？</p><ul><li>使用数组，基于每次渲染时的稳定调用顺序。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> componentHooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> currentHookIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// How useState works inside React (simplified).</span><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> pair <span class="token operator">=</span> componentHooks<span class="token punctuation">[</span>currentHookIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This is not the first render,</span>    <span class="token comment">// so the state pair already exists.</span>    <span class="token comment">// Return it and prepare for next Hook call.</span>    currentHookIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pair<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// This is the first time we're rendering,</span>  <span class="token comment">// so create a state pair and store it.</span>  pair <span class="token operator">=</span> <span class="token punctuation">[</span>initialState<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// When the user requests a state change,</span>    <span class="token comment">// put the new value into the pair.</span>    pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nextState<span class="token punctuation">;</span>    <span class="token function">updateDOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Store the pair for future renders</span>  <span class="token comment">// and prepare for the next Hook call.</span>  componentHooks<span class="token punctuation">[</span>currentHookIndex<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span>  currentHookIndex<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pair<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>state是独立的，即使同一组件被渲染两次</li></ul><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><ul><li>三步：<ul><li>触发：初始化、state更新</li><li>渲染：递归渲染</li><li>提交改变：初始化时使用appendChild、重新渲染则只应用最小的必要改变</li></ul></li><li>最后，浏览器重绘</li></ul><h3 id="state和快照"><a href="#state和快照" class="headerlink" title="state和快照"></a>state和快照</h3><ul><li>渲染意味着React在调用组件（函数），返回的UI是基于当前的state、props、事件处理函数和局部变量计算形成的快照</li><li>state存在于组件之外，不像一般局部变量，当函数调用结束时即被回收。</li><li>对state的修改只会在下一次渲染时生效，多次调用setState只会作用一次，且React处理状态更新会在所有事件处理函数之后发生。</li><li>在渲染发生作用之前，state的值会被 “fixed” ，即使调用它的函数是异步的，这是为了防止代码在运行时，state发生改变，从而导致与预期不同的结果</li></ul><h3 id="state的更新，如何使用最新的state"><a href="#state的更新，如何使用最新的state" class="headerlink" title="state的更新，如何使用最新的state"></a>state的更新，如何使用最新的state</h3><ul><li><p>批处理（batching）：state的更新会发生在所有setState完成之后，这样可以防止过多的重新渲染</p></li><li><p>如何使用最新的state：在setState中使用回调函数</p><ul><li>每次调用setState传入一个回调函数，setState会将这个函数放入一个队列，最后更新时会依次调用队列中的回调函数</li><li>混合使用：</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这一步也会被加入队列</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入队列</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increase the number</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">// 结果是6    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increase the number</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"> // 结果是46    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="在State中更新对象"><a href="#在State中更新对象" class="headerlink" title="在State中更新对象"></a>在State中更新对象</h3><ul><li>mutation(突变)：直接更改对象内部的值</li><li>虽然State中的对象是可以改变的，但仍然应当视其为只读，因为，单纯改变对象中的值不会触发重新渲染</li><li>使用扩展语法，快速覆写一个对象的属性<ul><li>扩展语法只复制一层深度，若需要更新嵌套的属性，则需要多次使用</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span>person<span class="token punctuation">,</span> <span class="token comment">// Copy the old fields</span>  firstName<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token comment">// But override this one</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 使用扩展语法更新更深层次的属性</span>  <span class="token operator">...</span>person<span class="token punctuation">,</span>  artwork<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>person<span class="token punctuation">.</span>artwork<span class="token punctuation">,</span>      image<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>更方便的更新属性（如果对象嵌套很深）：使用 Immer库 <a href="https://github.com/immerjs/use-immer">immerjs/use-immer: Use immer to drive state with a React hooks (github.com)</a></p></li><li><p>为什么不推荐使用突变？</p><ul><li>Debugging：可以在debug过程中方便的观察到渲染之间State是如何变化的</li><li>Optimizations：React的通常优化策略是当state和prop不发生改变时直接跳过，不进行突变有助于快速检查哪些发生了变化</li><li>New Features：正在开发中的新功能依赖于“把state视作快照”</li><li>Requirement Changes：便于一些应用实现基于“历史”的功能，比如Undo / Redo</li><li>Simpler Implementation：不进行突变，可以使React不对你的对象做任何特别处理，不需要劫持这些对象的属性（这一条是在吐槽VUE的双向数据绑定是劫持对象属性实现的，是吧？）</li></ul></li></ul><h3 id="在State中更新数组"><a href="#在State中更新数组" class="headerlink" title="在State中更新数组"></a>在State中更新数组</h3><ul><li>每次更新应当重新创建数组</li></ul><p><img src="/../images/ReactStudy/image-20211201110617187.png" alt="image-20211201110617187"></p><ul><li>slice和splice的区别，slice会返回新的数组</li><li>使用filter删除数组项</li><li>注意嵌套情况，也应当创建新的对象，或者使用Immer</li></ul><h2 id="管理状态"><a href="#管理状态" class="headerlink" title="管理状态"></a>管理状态</h2><h3 id="输入相关的状态声明"><a href="#输入相关的状态声明" class="headerlink" title="输入相关的状态声明"></a>输入相关的状态声明</h3><ul><li>找出影响组件展示的状态</li><li>确定触发状态改变的因素（人还是程序<ul><li>画出状态转换图</li></ul></li><li>使用useState声明状态</li><li>移除不必要状态<ul><li>不同状态是否会产生矛盾</li><li>该状态的信息是否能从其他状态获取</li></ul></li></ul><h3 id="选择State的结构"><a href="#选择State的结构" class="headerlink" title="选择State的结构"></a>选择State的结构</h3><ul><li>组合相关的状态</li><li>避免产生状态内部的矛盾</li><li>避免多余的状态，如果他们能从其他状态获取的话</li><li>减少和避免状态的重复，否则很难实现它们的同步</li><li>避免深度嵌套，尽量保持状态结构的平滑</li></ul><h3 id="共享状态"><a href="#共享状态" class="headerlink" title="共享状态"></a>共享状态</h3>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SVG学习笔记</title>
    <link href="/2021/11/11/SVG%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/11/SVG%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h1><h2 id="1-SVG与Canvas"><a href="#1-SVG与Canvas" class="headerlink" title="1. SVG与Canvas"></a>1. SVG与Canvas</h2><ul><li>两种绘图方式</li><li>SVG图像可以绘制在Canvas上</li><li>API 参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">Canvas - Web API 接口参考 | MDN (mozilla.org)</a></li></ul><h2 id="2-Canvas绘制SVG"><a href="#2-Canvas绘制SVG" class="headerlink" title="2. Canvas绘制SVG"></a>2. Canvas绘制SVG</h2><p>核心：drawImage()</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">CanvasRenderingContext2D.drawImage() - Web API 接口参考 | MDN (mozilla.org)</a></p><p>PS：有一个实验中的API Path2D() 可以直接绘制SVG路径</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Path2D/Path2D">Path2D() - Web API 接口参考 | MDN (mozilla.org)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDraw</span>(<span class="params">multi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> svgImg = imgRef.current; <span class="comment">// 使用svg作为src的image标签</span></span><br><span class="line">    <span class="keyword">const</span> canvas = canvasRef.current;<span class="comment">// canvas元素</span></span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// 获取2d图像绘制功能</span></span><br><span class="line">    <span class="keyword">let</span> width = svgImg.clientWidth * multi;<span class="comment">// multi: 放大倍数</span></span><br><span class="line">    <span class="keyword">let</span> height = svgImg.clientHeight * multi;</span><br><span class="line">    canvas.width = width;<span class="comment">// 设置canvas的大小</span></span><br><span class="line">    canvas.height = height;</span><br><span class="line">    ctx.drawImage(svgImg, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Path2D API绘制SVG Paths</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSVGPaths</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = canvasRef.current;</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> pureSvg = svgRef.current;</span><br><span class="line">  <span class="keyword">const</span> paths = pureSvg.childNodes;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">48</span>);</span><br><span class="line">  ctx.scale(<span class="number">2</span> / <span class="number">3</span>, <span class="number">2</span> / <span class="number">3</span>); <span class="comment">// 不知道为什么画出来是48*48而不是32*32</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> paths) &#123;</span><br><span class="line">    <span class="keyword">const</span> d = p.getAttribute(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> stroke = p.getAttribute(<span class="string">&#x27;stroke&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> strokeWidth = p.getAttribute(<span class="string">&#x27;stroke-width&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> strokeLinejoin = p.getAttribute(<span class="string">&#x27;stroke-linejoin&#x27;</span>); <span class="comment">// 获取各种属性</span></span><br><span class="line">    <span class="keyword">const</span> p2d = <span class="keyword">new</span> Path2D(d); <span class="comment">// 创建svg path</span></span><br><span class="line">    ctx.strokStyle = stroke; <span class="comment">// 设置颜色宽度连接方式等</span></span><br><span class="line">    ctx.lineWidth = (<span class="built_in">Number</span>(strokeWidth) * <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">    ctx.lineJoin = strokeLinejoin;</span><br><span class="line">    ctx.stroke(p2d); <span class="comment">// 绘制</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">ref</span>=<span class="string">&#123;svgRef&#125;</span> <span class="attr">width</span>=<span class="string">&#x27;32&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;32&#x27;</span> <span class="attr">viewBox</span>=<span class="string">&#x27;0 0 48 48&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">xmlns</span>=<span class="string">&#x27;http://www.w3.org/2000/svg&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&#x27;M5 7L10 9V37L5 39V7Z&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">stroke</span>=<span class="string">&#x27;#333&#x27;</span> <span class="attr">strokeWidth</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">strokeLinejoin</span>=<span class="string">&#x27;round&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&#x27;M16 23L21 25V37L16 39V23Z&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">stroke</span>=<span class="string">&#x27;#333&#x27;</span> <span class="attr">strokeWidth</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">strokeLinejoin</span>=<span class="string">&#x27;round&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&#x27;M27 21L32 19V35L27 33V21Z&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">stroke</span>=<span class="string">&#x27;#333&#x27;</span> <span class="attr">strokeWidth</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">strokeLinejoin</span>=<span class="string">&#x27;round&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&#x27;M38 9L43 11V37L38 39V9Z&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">stroke</span>=<span class="string">&#x27;#333&#x27;</span> <span class="attr">strokeWidth</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">strokeLinejoin</span>=<span class="string">&#x27;round&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-SVG导出为PNG"><a href="#3-SVG导出为PNG" class="headerlink" title="3.  SVG导出为PNG"></a>3.  SVG导出为PNG</h2><p>核心：通过DataUrl创建链接进行下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle2PNG</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = canvas.toDataURL(<span class="string">&#x27;image/png&#x27;</span>, <span class="number">1</span>); <span class="comment">// 类型,图片质量</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 创建下载链接</span></span><br><span class="line">  a.href = data;</span><br><span class="line">  a.download = <span class="string">&#x27;svgDemo.png&#x27;</span>;</span><br><span class="line">  a.click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-SVG转换为PNG-Uri"><a href="#4-SVG转换为PNG-Uri" class="headerlink" title="4.  SVG转换为PNG Uri"></a>4.  SVG转换为PNG Uri</h2><p>核心：SVG -&gt; SVG Base64 Uri -&gt; &lt;image/&gt; -&gt; canvas -&gt; toDataURL(‘image/png’)</p><ol><li><p>对SVG进行预处理</p><ol><li>处理内部的&lt;image/&gt;</li><li>处理CSS</li></ol></li><li><p>把SVG转换为base64编码的Uri</p><ol><li>API window.btoa() <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/btoa">WindowOrWorkerGlobalScope.btoa() - Web API 接口参考 | MDN (mozilla.org)</a></li></ol></li><li><p>通过获得的SVG DataUri，新建&lt;image/&gt;</p></li><li><p>image加载成功时，利用回调，转换为PNG Uri：</p><ol><li>创建canvas</li><li>利用drawImage() 把&lt;image /&gt;绘制在canvas上</li><li>利用canvas.toDataURL(‘image/png’,1) 转换为PNG Uri</li></ol></li><li><p> 参考：npm 包 save-svg-as-png <a href="https://github.com/exupero/saveSvgAsPng">exupero/saveSvgAsPng: Save SVGs as PNGs from the browser. (github.com)</a></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存为png，原理是动态创建canvas标签，利用toDataURL()创建下载链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>src image</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>width image.width</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>height image.height</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToPng</span>(<span class="params">src, width, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> pixelRatio = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">  canvas.width = width * pixelRatio;</span><br><span class="line">  canvas.height = height * pixelRatio;</span><br><span class="line">  canvas.style.width = <span class="string">`<span class="subst">$&#123;canvas.width&#125;</span>px`</span>;</span><br><span class="line">  canvas.style.height = <span class="string">`<span class="subst">$&#123;canvas.height&#125;</span>px`</span>;</span><br><span class="line">  ctx.setTransform(pixelRatio, <span class="number">0</span>, <span class="number">0</span>, pixelRatio, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  ctx.drawImage(src, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> png = canvas.toDataURL(<span class="string">&#x27;image/png&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  a.href = png;</span><br><span class="line">  a.download = <span class="string">&#x27;saveAsPng&#x27;</span>;</span><br><span class="line">  a.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存为png简单Demo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAsPng</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pureSvg = svgRef.current;</span><br><span class="line">  <span class="keyword">const</span> s = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">  <span class="keyword">const</span> src = s.serializeToString(pureSvg); <span class="comment">// 对svg进行序列化，转为字符串</span></span><br><span class="line">  <span class="keyword">const</span> doctype =</span><br><span class="line">    <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot; [&lt;!ENTITY nbsp &quot;&amp;#160;&quot;&gt;]&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> svgUri = <span class="string">`data:image/svg+xml;base64,<span class="subst">$&#123;<span class="built_in">window</span>.btoa(doctype + src)&#125;</span>`</span>; <span class="comment">// 转为base64编码的dataUri</span></span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">  image.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    convertToPng(image, image.width, image.height);</span><br><span class="line">  &#125;;</span><br><span class="line">  image.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;image load error&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  image.src = svgUri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-SVG字符串与SVG元素的互相转换"><a href="#5-SVG字符串与SVG元素的互相转换" class="headerlink" title="5. SVG字符串与SVG元素的互相转换"></a>5. SVG字符串与SVG元素的互相转换</h2><ol><li>SVG字符串 -&gt; SVG元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把SVG字符串转换为XML</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>str svg字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">XML</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2svg</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DOMParser().parseFromString(str, <span class="string">&#x27;text/xml&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> svgNode = str2svg(svg).documentElement;</span><br><span class="line">ParentDIV.appendChild(svgNode); <span class="comment">// 添加svg元素</span></span><br></pre></td></tr></table></figure><ol start="2"><li>SVG元素 -&gt; SVG字符串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">const</span> pureSvg = svgRef.current; <span class="comment">// 获取svg元素</span></span><br><span class="line">   <span class="keyword">const</span> s = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">   <span class="keyword">const</span> src = s.serializeToString(pureSvg); <span class="comment">// 对svg进行序列化，转为字符串</span></span><br><span class="line">   <span class="keyword">const</span> doctype =</span><br><span class="line">     <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot; [&lt;!ENTITY nbsp &quot;&amp;#160;&quot;&gt;]&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> svgString = doctype + src; <span class="comment">// 拼接</span></span><br></pre></td></tr></table></figure><h2 id="6-对图标的一些属性的简单修改"><a href="#6-对图标的一些属性的简单修改" class="headerlink" title="6. 对图标的一些属性的简单修改"></a>6. 对图标的一些属性的简单修改</h2><p>核心：使用setAttribute()对svg元素进行简单的设置</p><ol><li>代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 简单修改svg元素的属性</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>config svg设置</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;HTMLElement&#125;</span> </span>svgNode svg元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setConfig</span>(<span class="params">config, svgNode</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123;</span><br><span class="line">     size = <span class="string">&#x27;3em&#x27;</span>,</span><br><span class="line">     strokeWidth = <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">     strokeLinejoin = <span class="string">&#x27;round&#x27;</span>,</span><br><span class="line">     stroke = <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">   &#125; = config || &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (svgNode == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">   svgNode.setAttribute(<span class="string">&#x27;width&#x27;</span>, size);</span><br><span class="line">   svgNode.setAttribute(<span class="string">&#x27;height&#x27;</span>, size);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> child <span class="keyword">of</span> svgNode.childNodes) &#123;</span><br><span class="line">     child.setAttribute(<span class="string">&#x27;stroke-width&#x27;</span>, strokeWidth);</span><br><span class="line">     child.setAttribute(<span class="string">&#x27;stroke-linejoin&#x27;</span>, strokeLinejoin);</span><br><span class="line">     child.setAttribute(<span class="string">&#x27;stroke&#x27;</span>, stroke);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Demo地址：<a href="https://github.com/Ilizarov1/react_blog">Ilizarov1/react_blog (github.com)</a></li></ol><h1 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h1><p>可以对AE转出的json格式动画进行实时渲染</p><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h2><ol><li><p>主要使用了react-lottie库，该库将 lottie-web 进行了一些封装，便于在react中使用</p></li><li><p><a href="https://github.com/chenqingspring/react-lottie">chenqingspring/react-lottie: Render After Effects animations on React based on lottie-web (github.com)</a></p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Lottie <span class="keyword">from</span> <span class="string">&#x27;react-lottie&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> LineAnimation <span class="keyword">from</span> <span class="string">&#x27;../public/LineAnimation.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyLottie = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoPlay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">animationData</span>: LineAnimation,</span><br><span class="line">    <span class="attr">rendererSettings</span>: &#123;</span><br><span class="line">      <span class="attr">preserveAspectRatio</span>: <span class="string">&#x27;xMidYMid slice&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Lottie</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
